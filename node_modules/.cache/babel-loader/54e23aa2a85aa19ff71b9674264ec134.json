{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateVideoID = validateVideoID;\nexports.validateUrl = validateUrl;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _http = require('http');\n\nvar _http2 = _interopRequireDefault(_http);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} //adapter for IDs\n\n\nfunction validateVideoID(id) {\n  return validateUrl('www.youtube.com/watch?v=' + id);\n}\n\nfunction validateUrl(url) {\n  var videoID = '/' + _lodash2.default.last(url.split('/'));\n\n  var urlLowerCase = url.toLowerCase();\n  var urlSpltLowerCase = urlLowerCase.split('/');\n  return new Promise(function (fulfill, reject) {\n    if (_lodash2.default.includes(urlSpltLowerCase, 'youtube.com') || _lodash2.default.includes(urlSpltLowerCase, 'www.youtube.com')) {\n      var begin = urlLowerCase.replace('youtube.com', '').replace(videoID.toLowerCase(), '');\n\n      if (!(begin == 'www.' || begin == 'http://www.' || begin == '' || begin == 'https://www.')) {\n        reject('error: URL malformed');\n      }\n    } else {\n      reject('error: URL malformed');\n    }\n\n    if (videoID == '' || videoID == '/') {\n      reject('error: URL malformed');\n    }\n\n    fulfill(videoID);\n  }).then(function (videoID) {\n    return youtubeRequest(videoID);\n  });\n}\n\nfunction youtubeRequest(videoID) {\n  videoID = videoID.replace('/watch?v=', '');\n  return new Promise(function (fulfill, reject) {\n    var options = {\n      hostname: 'www.youtube.com',\n      port: 80,\n      path: '/oembed?url=http://www.youtube.com/watch?v=' + escape(videoID) + '&format=json',\n      method: 'HEAD',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    var req = _http2.default.request(options, function (res) {\n      if (res.statusCode == '404' || res.statusCode == '302') {\n        reject('error: youtube video does not exist');\n      } else {\n        fulfill(videoID);\n      }\n\n      req.on('data', function (res) {\n        console.log(res);\n      });\n      req.on('error', function (e) {\n        reject('error: something occured');\n      });\n    });\n\n    req.shouldKeepAlive = false;\n    req.end();\n  });\n}","map":null,"metadata":{},"sourceType":"script"}